<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GHower的博客</title>
  
  <subtitle>纸上得来终觉浅，绝知此事要躬行。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ghower.github.io/"/>
  <updated>2022-03-29T10:19:10.942Z</updated>
  <id>http://ghower.github.io/</id>
  
  <author>
    <name>GHower</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GithubPages搭建教程</title>
    <link href="http://ghower.github.io//post/GithubPages%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B.html"/>
    <id>http://ghower.github.io//post/GithubPages搭建教程.html</id>
    <published>2022-03-22T15:28:01.000Z</published>
    <updated>2022-03-29T10:19:10.942Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h1><p>这里省略300字介绍…..</p><h1 id="二、创建自己的GithubPages"><a href="#二、创建自己的GithubPages" class="headerlink" title="二、创建自己的GithubPages"></a>二、创建自己的GithubPages</h1><h2 id="1-基本页面"><a href="#1-基本页面" class="headerlink" title="1.基本页面"></a>1.基本页面</h2><p>要创建GithubPages 需要创建一个 username.Github.io的仓库</p><p><img src="/images/1647937677099-dfc2cd63-8519-4915-9408-39c9c67e6bec.png"></p><h2 id="2-选择GithubPages的主题"><a href="#2-选择GithubPages的主题" class="headerlink" title="2.选择GithubPages的主题"></a>2.选择GithubPages的主题</h2><p><img src="/images/1647937723353-dc5c66c6-0469-431e-ab36-4683cab77279.png"></p><p><img src="/images/1647937734551-dc238543-568f-4871-894e-fdfbe609dc8e.png"></p><h2 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h2><p>这里以简历的主题做测试，选Cayman theme，来到index.md文件，保存查看<br>随后在浏览器输入，username.Github.io即可</p><p><img src="/images/1647938071823-5fc0d5a5-5a4d-41ff-86f0-697d177002e6.png"></p><p>如果希望以此作为在线简历，只需要修改index.md文件即可</p><span id="more"></span><h1 id="三、作为博客使用"><a href="#三、作为博客使用" class="headerlink" title="三、作为博客使用"></a>三、作为博客使用</h1><p>上面已经说了，和halo、hexo一样，最简单的方式就是更换主题即可。</p><h2 id="1-配置域名和HTTPS"><a href="#1-配置域名和HTTPS" class="headerlink" title="1. 配置域名和HTTPS"></a>1. 配置域名和HTTPS</h2><p>GithubPages中已经免费提供了HTTPS，不再需要我们自己提供证书。<br>在云服务器上购买一个域名，并配置域名指向<br>ps: 当然不用自己的域名而用github.io那个也可以。</p><p><img src="/images/1647938799510-2866f766-e970-4ed6-923f-918a68f8ce4e.png"></p><p>回到Settings界面的GithubPages中，填写子域名，这里我创建了blog的记录，而我的二级域名是ghower.ltd所以这里填的是blog.ghower.ltd。<br>点击保存后可以看到类似下图的样子。</p><p><img src="/images/1647938736554-b6362f3f-8e44-4d6d-a5d7-e0ad2649023a.png"></p><p>重新访问blog.ghower.ltd，可以看到一样打开了前面的界面，和username.github.io的方式一样</p><p><img src="/images/1647938950308-a814ed7f-0f5c-454d-bbfa-9b32fbfad60f.png"></p><h2 id="2-内容同步"><a href="#2-内容同步" class="headerlink" title="2. 内容同步"></a>2. 内容同步</h2><p>在1中已经设置了域名，接下里就是丰富一下这个博客了<br>这里直接使用idea，将仓库下载下来</p><p><img src="/images/1647939626178-7aba0b2c-ba53-4285-a64b-14ee834d1f90.png"></p><p>修改index.md并提交上传即可。<br>但是现在这样的页面还是太简单。我们需要一个静态模板系统来管理博客文章。<br>Github官方推荐使用JekyII，但是那玩意我不会，下面介绍基于Hexo的</p><h2 id="3-基于Hexo做Pages的生成"><a href="#3-基于Hexo做Pages的生成" class="headerlink" title="3. 基于Hexo做Pages的生成"></a>3. 基于Hexo做Pages的生成</h2><h3 id="本地搭建"><a href="#本地搭建" class="headerlink" title="本地搭建"></a>本地搭建</h3><pre class="line-numbers language-shell" data-language="shell"><div class="caption"><span>script</span></div><code class="language-shell"># 安装hexo-clinpm install -g hexo-cli# 初始化一个hexo项目hexo init &#x2F;hexo# 发表hexo文章hexo new &quot;文章名称&quot;# 启动hexohexo server## 默认运行在4000端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>hexo new “postName” #新建文章</p><p>hexo new page “pageName” #新建页面</p><p>hexo generate #生成静态页面至public目录</p><p>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）</p><p>hexo deploy #将.deploy目录部署到GitHub</p><p>hexo help #查看帮助</p></blockquote><h3 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h3><ul><li>/_config.yml是站点信息</li><li>themess/landscape/_config.yml是站点的主题和个人设置</li></ul><p>两个会一起使用，根目录下的config.yml相当于全局的</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Site</span><span class="token key atrule">title</span><span class="token punctuation">:</span> 邴越的博客 <span class="token comment">#标题</span><span class="token key atrule">subtitle</span><span class="token punctuation">:</span> 纸上得来终觉浅 <span class="token comment">#副标题</span><span class="token key atrule">description</span><span class="token punctuation">:</span> 邴越 博客 架构 写作 <span class="token comment">#描述</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 邴越 <span class="token comment">#作者</span><span class="token key atrule">language</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>CN <span class="token comment">#语言</span><span class="token key atrule">timezone</span><span class="token punctuation">:</span>  Asia/Shanghai <span class="token comment">#时区</span><span class="token comment"># URL </span><span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//bingyue.github.io/   <span class="token comment">#网址</span><span class="token key atrule">root</span><span class="token punctuation">:</span> / <span class="token comment">#网站根目录</span><span class="token key atrule">permalink</span><span class="token punctuation">:</span> <span class="token punctuation">:</span>year/<span class="token punctuation">:</span>month/<span class="token punctuation">:</span>day/<span class="token punctuation">:</span>title/ <span class="token comment">#文章的永久链接格式</span><span class="token key atrule">permalink_defaults</span><span class="token punctuation">:</span> <span class="token comment">#永久链接中各部分的默认值 </span><span class="token comment"># Directory</span><span class="token key atrule">source_dir</span><span class="token punctuation">:</span> source <span class="token comment">#源文件，存放内容</span><span class="token key atrule">public_dir</span><span class="token punctuation">:</span> public <span class="token comment">#公共文件夹，存放生成的站点文件</span><span class="token key atrule">tag_dir</span><span class="token punctuation">:</span> tags <span class="token comment">#标签文件夹</span><span class="token key atrule">archive_dir</span><span class="token punctuation">:</span> archives <span class="token comment">#归档文件夹</span><span class="token key atrule">category_dir</span><span class="token punctuation">:</span> categories <span class="token comment">#分类文件夹</span><span class="token key atrule">code_dir</span><span class="token punctuation">:</span> downloads/code<span class="token key atrule">i18n_dir</span><span class="token punctuation">:</span> <span class="token punctuation">:</span>lang <span class="token comment">#国际化</span><span class="token key atrule">skip_render</span><span class="token punctuation">:</span><span class="token comment"># Writing</span><span class="token key atrule">new_post_name</span><span class="token punctuation">:</span> <span class="token punctuation">:</span>title.md <span class="token comment">#新文章标题</span><span class="token key atrule">default_layout</span><span class="token punctuation">:</span> post <span class="token comment">#默认模板(post page photo draft)</span><span class="token key atrule">titlecase</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment">#标题转换成大写</span><span class="token key atrule">external_link</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment">#新标签页里打开连接</span><span class="token key atrule">filename_case</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token comment">#把文件名称转换为 (1) 小写或 (2) 大写</span><span class="token key atrule">render_drafts</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">post_asset_folder</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">relative_link</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">future</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">highlight</span><span class="token punctuation">:</span> <span class="token comment">#语法高亮</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment">#显示行号</span>  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span><span class="token comment"># Category &amp; Tag</span><span class="token key atrule">default_category</span><span class="token punctuation">:</span> uncategorized <span class="token comment">#默认分类</span><span class="token key atrule">category_map</span><span class="token punctuation">:</span><span class="token key atrule">tag_map</span><span class="token punctuation">:</span><span class="token comment"># Date / Time format</span><span class="token key atrule">date_format</span><span class="token punctuation">:</span> YYYY<span class="token punctuation">-</span>MM<span class="token punctuation">-</span>DD<span class="token key atrule">time_format</span><span class="token punctuation">:</span> HH<span class="token punctuation">:</span>mm<span class="token punctuation">:</span>ss<span class="token comment"># Pagination </span><span class="token key atrule">per_page</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token comment">#每页文章数, 设置成 0 禁用分页</span><span class="token key atrule">pagination_dir</span><span class="token punctuation">:</span> page <span class="token comment">#分页目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="发布到GithubPages"><a href="#发布到GithubPages" class="headerlink" title="发布到GithubPages"></a>发布到GithubPages</h3><ol><li>安装hexo-deployer-git</li></ol><pre class="line-numbers language-shell" data-language="shell"><div class="caption"><span>script</span></div><code class="language-shell">npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li><p>配置_config.yml文件</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>ghower/ghower.github.io.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>发布</p><pre class="line-numbers language-shell" data-language="shell"><div class="caption"><span>script</span></div><code class="language-shell">hexo clean  &amp;&amp; hexo gegerate &amp;&amp; hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、介绍&quot;&gt;&lt;a href=&quot;#一、介绍&quot; class=&quot;headerlink&quot; title=&quot;一、介绍&quot;&gt;&lt;/a&gt;一、介绍&lt;/h1&gt;&lt;p&gt;这里省略300字介绍…..&lt;/p&gt;
&lt;h1 id=&quot;二、创建自己的GithubPages&quot;&gt;&lt;a href=&quot;#二、创建自己的GithubPages&quot; class=&quot;headerlink&quot; title=&quot;二、创建自己的GithubPages&quot;&gt;&lt;/a&gt;二、创建自己的GithubPages&lt;/h1&gt;&lt;h2 id=&quot;1-基本页面&quot;&gt;&lt;a href=&quot;#1-基本页面&quot; class=&quot;headerlink&quot; title=&quot;1.基本页面&quot;&gt;&lt;/a&gt;1.基本页面&lt;/h2&gt;&lt;p&gt;要创建GithubPages 需要创建一个 username.Github.io的仓库&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1647937677099-dfc2cd63-8519-4915-9408-39c9c67e6bec.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-选择GithubPages的主题&quot;&gt;&lt;a href=&quot;#2-选择GithubPages的主题&quot; class=&quot;headerlink&quot; title=&quot;2.选择GithubPages的主题&quot;&gt;&lt;/a&gt;2.选择GithubPages的主题&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/1647937723353-dc5c66c6-0469-431e-ab36-4683cab77279.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1647937734551-dc238543-568f-4871-894e-fdfbe609dc8e.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;3-测试&quot;&gt;&lt;a href=&quot;#3-测试&quot; class=&quot;headerlink&quot; title=&quot;3.测试&quot;&gt;&lt;/a&gt;3.测试&lt;/h2&gt;&lt;p&gt;这里以简历的主题做测试，选Cayman theme，来到index.md文件，保存查看&lt;br&gt;随后在浏览器输入，username.Github.io即可&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1647938071823-5fc0d5a5-5a4d-41ff-86f0-697d177002e6.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果希望以此作为在线简历，只需要修改index.md文件即可&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="http://ghower.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="建站" scheme="http://ghower.github.io/tags/%E5%BB%BA%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>java8新特性之Stream流操作</title>
    <link href="http://ghower.github.io//post/java8%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8BStream%E6%B5%81%E6%93%8D%E4%BD%9C.html"/>
    <id>http://ghower.github.io//post/java8新特性之Stream流操作.html</id>
    <published>2022-03-22T15:28:01.000Z</published>
    <updated>2022-03-29T10:29:34.588Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Stream流操作是java8的最重要的新特性之一，功能强大,非常常用。可以说每个java coder必须掌握，这次把理论放在最后面，因为你可能不需要知道的多么详细，只是需要看看某个功能，可能听名字就大概知道它是做什么的。</p><p>举个简单例子，现在给了你同学信息和成绩，你需要统计班级平均分</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 以前可能的做法</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Double</span> <span class="token function">avgScore</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> stus<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> student <span class="token operator">:</span> stus<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> core <span class="token operator">=</span> student<span class="token punctuation">.</span>core<span class="token punctuation">;</span>        sum <span class="token operator">+=</span> core<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span>  <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>sum <span class="token operator">/</span> stus<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 有了Stream后，</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Double</span> <span class="token function">avgScore</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> stus<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">OptionalDouble</span> average <span class="token operator">=</span> stus<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToDouble</span><span class="token punctuation">(</span>stu <span class="token operator">-></span> stu<span class="token punctuation">.</span>core<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">average</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> average<span class="token punctuation">.</span><span class="token function">getAsDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="流的一些常用操作"><a href="#流的一些常用操作" class="headerlink" title="流的一些常用操作"></a>流的一些常用操作</h1><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p><code>filter</code>过滤操作，只返回满足条件的数据</p><p><code>filter</code>返回的流中只包含满足断言(<code>predicate</code>)的数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//输出学生数组中，成绩大于80的学生</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span>  <span class="token function">sFilter</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> stus<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        stus<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>student <span class="token operator">-></span> student<span class="token punctuation">.</span><span class="token function">getCore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">80</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h3><p><code>distinct</code>输出的流中彼此不同的元素，通过<code>Object.equals(Object)</code>来检查是否包含相同的元素。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//从数组中找出不同的对象</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span>  <span class="token function">sDistinct</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> stus<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        stus<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="map、peek与forEach对比"><a href="#map、peek与forEach对比" class="headerlink" title="map、peek与forEach对比"></a>map、peek与forEach对比</h3><p><code>map</code>可以对流中每一个的元素执行操作返回一种元素(可以相同)，可以用来做元素转换</p><p><code>peek</code>通常用于debug，会通过Consumer对流操作，但操作结果不返回Stream中。</p><p><code>forEach</code>与<code>map</code>和<code>peek</code>类似，但由于不会返回元素，forEach的返回值是void，可以看做是流的终点操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//map,从Student数组中获取由name组成的数组</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span>  <span class="token function">sMap</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> stus<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> collect <span class="token operator">=</span> stus<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>student <span class="token operator">-></span> student<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stus<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collect<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//forEach，将Student数组中的成绩属性全部加1</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span>  <span class="token function">sForEach</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> stus<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        stus<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>student <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                    student<span class="token punctuation">.</span><span class="token function">setCore</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">getCore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stus<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>peek</code>和<code>map</code>的区别，在后面的理论中会对其原理做解释</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// peek</span><span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span>i<span class="token operator">-></span> <span class="token punctuation">&#123;</span>            i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">print</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出结果 1234</span><span class="token comment">//map</span><span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i<span class="token operator">-></span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">print</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出结果 2345</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可见peek中虽然对i进行+1操作，但没有改变源数据</p><h3 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h3><p>扁平化处理流，<code>flatMap</code>和<code>map</code>类似，但flatMap转换返回的是Stream对象，而map返回的是数据源的对象，flatMap会把返回的Stream对象中的元素压缩到一起，最后回到原来的流中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> allValues <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Collection&lt;List&lt;Integer>></span>        <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                      <span class="token comment">// Stream&lt;List&lt;Integer>></span>        <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token operator">::</span><span class="token function">stream</span><span class="token punctuation">)</span>         <span class="token comment">// Stream&lt;Integer></span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>allValues<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个例子中，将map.values扁平化处理成单个的Stream。</p><h3 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h3><p><code>sorted</code>对源数据进行排序，通过实现Comparable接口完成排序。</p><p>如果源没有实现Comparable接口，在终点操作时将会抛出<code>java.lang.ClassCastException</code>异常。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 按成绩排序，从大到小 </span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sSorted</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> stus<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> collect <span class="token operator">=</span> stus<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparingInt</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token operator">::</span><span class="token function">getCore</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collect<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h3><p><code>limit</code>进行短路操作。指定一定数量的元素的流。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sLimit</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> stus<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> collect <span class="token operator">=</span> stus<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparingInt</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token operator">::</span><span class="token function">getCore</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collect<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="boxed"><a href="#boxed" class="headerlink" title="boxed"></a>boxed</h3><p>将一个原始流转为盒型的流，就是将原始数据类型<code>int</code>，<code>long</code>，<code>double</code>转为<code>Integer</code>，<code>Long</code>，<code>Double</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 计算average</span><span class="token class-name">OptionalDouble</span> average <span class="token operator">=</span> <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">average</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>average<span class="token punctuation">.</span><span class="token function">getAsDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// peek内的i是Integer类型</span><span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span>i<span class="token operator">-></span> <span class="token punctuation">&#123;</span>            i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">print</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="skip"><a href="#skip" class="headerlink" title="skip"></a>skip</h3><p><code>skip</code>从当前流结果中丢弃前n个元素，返回新的流，如果元素个数小于或等于n，会返回空的流</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sSkip</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> stus<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> collect <span class="token operator">=</span> stus<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       collect<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><p><code>reduce</code>可以看做是<code>map</code>的细节版本，它有两个参数</p><ul><li>pre：上一次返回的对象</li><li>cur：当前对象</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> reduce <span class="token operator">=</span> <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span>cur<span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>         <span class="token keyword">return</span> pre<span class="token operator">+</span>cur<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>reduce<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>reduce</code> 还有重载的方法，大概说一下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 将使用流中第一个元素作为初始值</span>pubic <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">BinaryOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> accumulator<span class="token punctuation">)</span><span class="token comment">// 使用提供的identity作为初始值</span>pubic <span class="token class-name">T</span> <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">T</span> identity<span class="token punctuation">,</span> <span class="token class-name">BinaryOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> accumulator<span class="token punctuation">)</span><span class="token comment">//同上，但对结果进行combiner操作，可以转为其他类型</span>pubic <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">></span></span> <span class="token class-name">U</span> <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">U</span> identity<span class="token punctuation">,</span> <span class="token class-name">BiFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span><span class="token class-name">U</span><span class="token punctuation">></span></span> accumulator<span class="token punctuation">,</span> <span class="token class-name">BinaryOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">></span></span> combiner<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>值得注意的是<code>accumulator</code>应该满足结合性(associative)。</p><h3 id="match"><a href="#match" class="headerlink" title="match"></a>match</h3><p><code>match</code> 匹配，它有三个方法：</p><ul><li> allMatch<br>若流中所有元素符合条件断言，则返回true，反之为false，流为空则总是返回true </li><li> anyMatch<br>流中有一个及以上符合条件断言，则返回true </li><li> noneMatch<br>流中所有元素不满足条件断言，则返回true </li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sMatch</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> stus<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">boolean</span> b <span class="token operator">=</span> stus<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">allMatch</span><span class="token punctuation">(</span>stu <span class="token operator">-></span> stu<span class="token punctuation">.</span><span class="token function">getCore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        b <span class="token operator">=</span> stus<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>stu <span class="token operator">-></span> stu<span class="token punctuation">.</span><span class="token function">getCore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        b <span class="token operator">=</span> stus<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">noneMatch</span><span class="token punctuation">(</span>stu <span class="token operator">-></span> stu<span class="token punctuation">.</span><span class="token function">getCore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="count"><a href="#count" class="headerlink" title="count"></a>count</h3><p><code>count</code> 方法返回流中元素的数量、它的底层实现为</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">mapToLong</span><span class="token punctuation">(</span>e<span class="token operator">-></span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 其中sum是原始流的方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="collect"><a href="#collect" class="headerlink" title="collect"></a>collect</h3><p><code>collect</code> 非常常用了，它将按参数的方法，收集流中的数据组装然后返回一个对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 收集成List</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> asList <span class="token operator">=</span> stringStream<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>    <span class="token class-name">ArrayList</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">,</span>     <span class="token class-name">ArrayList</span><span class="token operator">::</span><span class="token function">add</span><span class="token punctuation">,</span>    <span class="token class-name">ArrayList</span><span class="token operator">::</span><span class="token function">addAll</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 收集成String</span><span class="token class-name">String</span> concat <span class="token operator">=</span> stringStream<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>    <span class="token class-name">StringBuilder</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">,</span>     <span class="token class-name">StringBuilder</span><span class="token operator">::</span><span class="token function">append</span><span class="token punctuation">,</span>    <span class="token class-name">StringBuilder</span><span class="token operator">::</span><span class="token function">append</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><ul><li> findAny<br>从流中任意返回一个元素，串行流比较难看到效果 </li><li> findFirst<br>返回流中第一个元素 </li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 若流为空，则返回空的Optional</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> any <span class="token operator">=</span> stus<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> first <span class="token operator">=</span> stus<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="max、min"><a href="#max、min" class="headerlink" title="max、min"></a>max、min</h3><ul><li>max：返回流中的最大值</li><li>min：返回流中最小值</li></ul><p>boxed型的流需要给出自己的比较器，而原始流不需要</p><h3 id="toArray"><a href="#toArray" class="headerlink" title="toArray()"></a>toArray()</h3><p>将流中的元素放入到一个数组中。</p><h3 id="contact"><a href="#contact" class="headerlink" title="contact"></a>contact</h3><p>连接两个类型一样的流对象</p><h1 id="来一杯理论"><a href="#来一杯理论" class="headerlink" title="来一杯理论"></a>来一杯理论</h1><p>理论整理来自Javadoc。</p><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><p>Stream流和具体的集合区别。</p><ul><li> 不存储数据：<br>流操作基于数据源对象，但本身不存储数据元素，或者说用完即消(使用者是无感知的)，通过管道将数据源元素传递给操作 </li><li> 函数式编程<br>流操作也不会修改数据源，filter、map都不会对源数据做修改 </li><li> 延迟操作<br>流的很多操作如filter,map等中间操作是延迟执行的，只记录了要怎么操作但还没执行，只有到终点操作才会将操作顺序执行。<br>就像点菜一样，下单过程，不是马上做的，而且确定了订单才根据订单做。 </li><li> 解绑<br>对于无限数量的流，有些操作是可以在有限的时间完成的，比如<code>limit(n)</code> 或 <code>findFirst()</code>，这些操作可以实现”短路”(Short-circuiting)，访问到有限的元素后就可以返回。 </li><li> 纯消费<br>流的元素只能访问一次，类似迭代器Iterator，操作没有回头路，如果你想从头重新访问流的元素，那你得重新生成一个新的流。<br>就是说流操作的每一步都是上一步的结果，而初始数据则是源数据。 </li></ul><p>流的操作是以管道的方式串起来的。流管道包含一个数据源，接着包含零到N个中间操作，最后以一个终点操作结束。</p><p><code>Stream</code>接口还提供了原语int，long，double级的专门化的流。如<code>IntStream</code>, <code>LongStream</code> 和 <code>DoubleStream</code>。姑且称他们为primitive原始流，是对基本类型执行操作的，不过我们使用流通常是对对象操作。</p><h5 id="创建流"><a href="#创建流" class="headerlink" title="创建流"></a>创建流</h5><p>创建的方法很多，主要有</p><ul><li>集合自带的<code>stream()</code>方法</li><li>集合的静态<code>Arrays.stream(Object[])</code>方法</li><li>流的静态方法，如<code>Stream.of(Object[])</code></li><li>从文件中获得流，<code>BufferedReader.lines()</code></li><li>文件类<code>Files</code> 操作路径的方法，如<code>list</code>、<code>find</code>、<code>walk</code>等。</li><li>随机数流<code>Random.ints()</code></li><li>底层的<code>StreamSupport</code>，它提供了将拆分器<code>Spliterator</code>转换成流的方法。</li></ul><h5 id="中间操作-intermediate-operations"><a href="#中间操作-intermediate-operations" class="headerlink" title="中间操作 intermediate operations"></a>中间操作 intermediate operations</h5><p>中间操作会返回流对象本身，形成串联的管道，流式风格（fluent style），并且中间操作是延迟的，不会修改源数据，只有在终点操作时才真正执行。</p><p>常见的中间操作</p><p><code>filter</code>、<code>distinct</code>、<code>map</code>、<code>peek</code>、<code>sorted</code>、<code>limit</code>、<code>boxed</code>、<code>skip</code>、<code>flatmap</code>、<code>skip</code>、<code>reduce</code></p><h5 id="终点操作-terminal-operations"><a href="#终点操作-terminal-operations" class="headerlink" title="终点操作 terminal operations"></a>终点操作 terminal operations</h5><p>终点操作是真正执行的，会将流的最终结果返回。</p><p>常见的终点操作</p><p><code>Match</code>、<code>count</code>、<code>collect</code>、<code>find</code>、<code>forEach</code>、<code>forEachOrdered</code>、<code>max</code>、<code>min</code>、<code>reduce</code>、<code>average</code>、<code>toArray</code></p><h4 id="1-流的串行与并行"><a href="#1-流的串行与并行" class="headerlink" title="1. 流的串行与并行"></a>1. 流的串行与并行</h4><p>所有的流操作都可以串行执行或者并行执行。除非显示地创建并行流，否则Java库中创建的都是串行流。</p><ul><li><code>Collection.stream()</code>创建串行流，使用<code>parallel()</code>也可以转为并行流</li><li><code>Collection.parallelStream()</code>创建并行流，使用<code>sequential()</code>方法可以转为串行流。</li></ul><h4 id="2-无干扰-Non-interference"><a href="#2-无干扰-Non-interference" class="headerlink" title="2. 无干扰 Non-interference"></a>2. 无干扰 Non-interference</h4><p>流可以从非线程安全的集合中创建，当流的管道执行的时候，非concurrent数据源不应该被改变。</p><p>也就是说，在终点操作(管道执行)时，不能对数据源再做修改，避免并发问题产生无法预料的结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 这会抛出异常java.util.ConcurrentModificationException</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> sl <span class="token operator">=</span> l<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sl<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">-></span> l<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 正常</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> sl <span class="token operator">=</span> l<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>l<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"three"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在中间操作修改</span>sl<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用concurrent的方式,也正常,但可能有无法预料的结果</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> sl <span class="token operator">=</span> l<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sl<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">-></span> l<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"three"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://juejin.cn/post/6844903576339218440">CopyOnWriteArrayList的参考</a></p><p>特别的，如果将add换成set，并不会抛异常，因为对象没有被修改，只是内容发生变化。</p><h4 id="3-结合性"><a href="#3-结合性" class="headerlink" title="3. 结合性"></a>3. 结合性</h4><p>一个操作或者函数<code>op</code>满足结合性意味着它满足下面的条件</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">(</span>a op b<span class="token punctuation">)</span> op c <span class="token operator">==</span> a <span class="token function">op</span> <span class="token punctuation">(</span>b op c<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于并发流来说，如果操作满足结合性，我们就可以并行计算</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">a op b op c op d <span class="token operator">==</span> <span class="token punctuation">(</span>a op b<span class="token punctuation">)</span> op <span class="token punctuation">(</span>c op d<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>比如<code>min</code>、<code>max</code>以及字符串连接都是满足结合性的。</p><h4 id="4-排序"><a href="#4-排序" class="headerlink" title="4. 排序"></a>4. 排序</h4><p>某些流的返回的元素是有确定顺序的，我们称之为 _encounter order_。</p><p>一个流是否是encounter order主要依赖数据源和它的中间操作，比如数据源List和Array上创建的流是有序的(ordered)，但是在HashSet创建的流不是有序的.</p><p><code>sorted</code>方法可以将流转换成<strong>encounter order</strong>的，<code>unordered</code>可以将流转换成<strong>encounter order</strong>的。</p><p><strong>注意，这个方法并不是对元素进行排序或者打散，而是返回一个是否_encounter order_的流</strong></p><ul><li><code>map</code>会用不同的类型替换流中的元素，此时，元素的有序性已经没有意义了。</li><li><code>filter</code> 执行丢弃了一些值，流的类型没有改变</li></ul><p>对于串行流，流有序与否不会影响其性能，只是会影响确定性(determinism)，无序流在多次执行的时候结果可能是不一样的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;Stream流操作是java8的最重要的新特性之一，功能强大,非常常用。可以说每个java coder必须掌握，这次把理论放在最后面，因为你
      
    
    </summary>
    
      <category term="java" scheme="http://ghower.github.io/categories/java/"/>
    
    
      <category term="java" scheme="http://ghower.github.io/tags/java/"/>
    
      <category term="新特性" scheme="http://ghower.github.io/tags/%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>python在列表，元组，字典变量前加_号</title>
    <link href="http://ghower.github.io//post/python%20%E5%9C%A8%E5%88%97%E8%A1%A8%EF%BC%8C%E5%85%83%E7%BB%84%EF%BC%8C%E5%AD%97%E5%85%B8%E5%8F%98%E9%87%8F%E5%89%8D%E5%8A%A0_%E5%8F%B7%E3%80%82%E3%80%82.html"/>
    <id>http://ghower.github.io//post/python 在列表，元组，字典变量前加_号。。.html</id>
    <published>2022-03-22T15:28:01.000Z</published>
    <updated>2022-03-29T10:15:29.267Z</updated>
    
    <content type="html"><![CDATA[<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><p>在python基础学习中可能遗漏这一点，现在补上；<br>在一个列表、元组或字典变量前加*，结果如下<br><img src="https://cdn.nlark.com/yuque/0/2022/png/21909802/1648547875816-78048d84-afd0-4ac8-8cce-282101f15a73.png#clientId=u80b6d177-fb8e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ubbad341f&margin=%5Bobject%20Object%5D&originHeight=287&originWidth=675&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=u43ade33c-757a-4358-a169-2c405ec3a3e&title=" alt="img.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/gif/21909802/1648547875706-cec28ad0-20c3-4d7d-b276-b59abf0088ef.gif#clientId=u80b6d177-fb8e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ua4fd38d9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1&originWidth=1&originalType=url&ratio=1&rotation=0&showTitle=false&size=43&status=done&style=none&taskId=udcfd0e8e-c97d-4724-949b-c0887f1ed14&title=" alt="image.png"></p><p>可以发现，在列表前加*号，会将列表拆分成一个一个的独立元素，不光是列表、元组、字典，由numpy生成的向量也可以拆分；</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/21909802/1648547875824-622cf013-7bc1-40f0-9377-00dc5a3f831c.png#clientId=u80b6d177-fb8e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u57f1d2d1&margin=%5Bobject%20Object%5D&originHeight=218&originWidth=742&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=uf3472193-e4a7-46bb-bc73-e14280478e0&title="></p><p>那这些又有什么用呢？了解过函数中*args和**kwargs的人应该知道，这两个形参都接收若干个参数，通常我们将其称为参数组；<br />          </p><ul><li>*args：接收若干个位置参数，转换成元组tuple形式</li><li>**kwargs：接收若干个关键字参数，转换成字典dict形式</li></ul><p>ps:需要注意的是位置参数*args，一定要在关键字参数**kwargs前<br>看下面的例子；</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/21909802/1648547875825-ae14a08f-ee0d-405a-81f7-a99e13d28112.png#clientId=u80b6d177-fb8e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u7753a28f&margin=%5Bobject%20Object%5D&originHeight=482&originWidth=533&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=u49a19fa6-28e4-41f3-9b21-a4e336887da&title="></p><p>不难发现，如果不加*，add函数将整个列表当做一个元素使用,也就是add(([1,2,4,5],))。</p><p>而带有*号的参数，此时相当于add((1, 2, 4, 5));</p><p>*号也可以作用于二维的列表；</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/21909802/1648547875819-97401cc9-cbaf-44eb-a232-84fc6fd4ad22.png#clientId=u80b6d177-fb8e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u54ffd642&margin=%5Bobject%20Object%5D&originHeight=173&originWidth=416&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=u1c3f4cd2-6150-4b31-95e4-f2d35e20ccc&title="></p><p>显然也是将列表进行拆分，结果是两个一维列表；</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/21909802/1648547876246-fe86735c-3d6c-4f11-81ce-d297dadcd710.png#clientId=u80b6d177-fb8e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u34f2666b&margin=%5Bobject%20Object%5D&originHeight=418&originWidth=384&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=u08346bb4-bc6f-4296-aff5-17517310e7b&title="></p><p>结果也与上面所说相同；</p><p>这么一看，这个带*变量的作用，就仿佛是把列表解开一层似的，而python中有一个zip函数，功能与之相反。<br>zip是将一个或多个可迭代对象进行包装压缩，返回将结果是列表；</p><p>通俗的说：<strong>zip()压缩可迭代对象，*号解压可迭代对象；</strong></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>最后需要<strong>注意</strong>的是：</p><ul><li>可迭代对象才可以使用*号拆分；</li><li>带*号变量严格来说并不是一个变量，而更应该称为参数，它是不能赋值给其他变量的，但可以作为参数传递；</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;标题&quot;&gt;&lt;a href=&quot;#标题&quot; class=&quot;headerlink&quot; title=&quot;标题&quot;&gt;&lt;/a&gt;标题&lt;/h1&gt;&lt;p&gt;在python基础学习中可能遗漏这一点，现在补上；&lt;br&gt;在一个列表、元组或字典变量前加*，结果如下&lt;br&gt;&lt;img src=&quot;https:
      
    
    </summary>
    
    
      <category term="python" scheme="http://ghower.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>【设计模式】23种设计模式(java)学前必备课！</title>
    <link href="http://ghower.github.io//post/%E3%80%90%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%9123%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(java)%E5%AD%A6%E5%89%8D%E5%BF%85%E5%A4%87%E8%AF%BE%EF%BC%81.html"/>
    <id>http://ghower.github.io//post/【设计模式】23种设计模式(java)学前必备课！.html</id>
    <published>2022-03-22T15:28:01.000Z</published>
    <updated>2022-03-29T10:18:47.590Z</updated>
    
    <content type="html"><![CDATA[<h1 id="六大原则"><a href="#六大原则" class="headerlink" title="六大原则"></a>六大原则</h1><p>这篇只有部分代码实例。</p><h2 id="1、单一职责原则-Sington-Principle"><a href="#1、单一职责原则-Sington-Principle" class="headerlink" title="1、单一职责原则(Sington Principle)"></a>1、单一职责原则(Sington Principle)</h2><p>不要存在多于一个导致类变更的原因，也就是说每个类应该实现单一的职责，如若不然，就应该把类拆分。<strong>不要让一个类承担过多的职责</strong>，避免职责耦合在一起</p><h2 id="2、里氏替换原则（Liskov-Substitution-Principle）"><a href="#2、里氏替换原则（Liskov-Substitution-Principle）" class="headerlink" title="2、里氏替换原则（Liskov Substitution Principle）"></a>2、里氏替换原则（Liskov Substitution Principle）</h2><p>里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。</p><p>里氏代换原则中说，任何基类（父类）可以出现的地方，子类一定可以出现。 LSP是继承复用的基石，只有当衍生类（子类）可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。</p><p>里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。—— From Baidu 百科</p><p>历史替换原则中，子类对父类的方法尽量不要重写和重载。因为父类代表了定义好的结构，通过这个规范的接口与外界交互，子类不应该随便破坏它。</p><p><strong>所有引用基类（父类）的地方必须能透明地使用其子类的对象。</strong></p><h2 id="3、依赖倒转原则（Dependence-Inversion-Principle）"><a href="#3、依赖倒转原则（Dependence-Inversion-Principle）" class="headerlink" title="3、依赖倒转原则（Dependence Inversion Principle）"></a>3、依赖倒转原则（Dependence Inversion Principle）</h2><p>这个是开闭原则的基础，具体内容：面向接口编程，依赖于抽象而不依赖于具体实现。写代码时用到具体类时，不与具体类交互，而与具体类的上层接口交互。</p><p>依赖倒置就是为了解决耦合，让程序依赖抽象。一个简单的例子</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 反例</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Cat</span> cat<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Dog</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Sys</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">autoRun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"cat"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cat<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>dog<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 应用依赖倒置原则</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">implements</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">implements</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Animal</span> animal<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Sys</span><span class="token punctuation">(</span><span class="token class-name">Animal</span> animal<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>animal <span class="token operator">=</span> animal<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">autoRun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        animal<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出不再于具体实现的Cat和Dog类，而是抽象的Animal接口，加入新的动物时也不用怕。</p><p>这种设计也充分说明了，类与类不应该直接依赖细节，因为这样会导致耦合，限制了可扩展性，而是让<strong>类与类直接依赖抽象</strong>。</p><h2 id="4、接口隔离原则（Interface-Segregation-Principle）"><a href="#4、接口隔离原则（Interface-Segregation-Principle）" class="headerlink" title="4、接口隔离原则（Interface Segregation Principle）"></a>4、接口隔离原则（Interface Segregation Principle）</h2><p>这个原则的意思是：每个接口中不存在子类用不到却必须实现的方法，如果不然，就要将接口拆分。使用多个隔离的接口，比使用单个接口（多个接口方法集合到一个的接口）要好。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Human</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">birth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 生孩子</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> man<span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> woman<span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上，man类可能不需要实现接口中的birth方法，而只使用一个接口让两个类实现的话，两个类中就存在不需要的方法，导致接口没有隔离。</p><p>单一职责和接口隔离原则</p><ul><li>单一职责原则注重的是职责，针对的是程序中的实现和细节；</li><li>接口隔离原则注重的是对接口依赖的隔离，主要针对抽象；</li></ul><h2 id="5、开闭原则（Open-Close-Principle）"><a href="#5、开闭原则（Open-Close-Principle）" class="headerlink" title="5、开闭原则（Open Close Principle）"></a>5、开闭原则（Open Close Principle）</h2><p>就是说<strong>对扩展开放，对修改关闭</strong>。在程序需要进行拓展的时候，不应该去修改原有的代码，而是要扩展原有代码，实现一个热插拔的效果。为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类等。依赖倒置中的例子同样违反开闭原则。</p><h2 id="6、合成复用原则（Composite-And-Reuse-Principle）"><a href="#6、合成复用原则（Composite-And-Reuse-Principle）" class="headerlink" title="6、合成复用原则（Composite And Reuse Principle）"></a>6、合成复用原则（Composite And Reuse Principle）</h2><p>CARP原则是尽量优先使用合成/聚合的方式，而不是使用继承。</p><p>就是在一个新的对象里面使用一些已有的对象，使之成为新对象的一部分；新的对象通过向这些对象的委派达到复用已有功能的目的。</p><p>复用的两种方式： 合成和继承</p><h1 id="一法则"><a href="#一法则" class="headerlink" title="一法则"></a>一法则</h1><h2 id="7、迪米特法则（最少知道原则）（Demeter-Principle）"><a href="#7、迪米特法则（最少知道原则）（Demeter-Principle）" class="headerlink" title="7、迪米特法则（最少知道原则）（Demeter Principle）"></a>7、迪米特法则（最少知道原则）（Demeter Principle）</h2><p>一个类对自己依赖的类知道的越少越好。也就是说无论被依赖的类多么复杂，都应该将逻辑封装在方法的内部，和我这个类没关系，你只需要通过public方法提供给外部。这样当被依赖的类变化时，才能最小的影响该类，尽量少地影响其他模块，降低系统的耦合度，使类与类之间保持松散的耦合关系。</p><p>最少知道原则的另一个表达方式是：只与直接的朋友通信。类之间只要有耦合关系，就叫朋友关系。耦合分为依赖、关联、聚合、组合等。我们称出现在成员变量、方法参数、方法返回值中的类为直接朋友。局部变量、临时变量则不是直接的朋友。我们要求陌生的类不要作为局部变量出现在类中。</p><h1 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h1><p>总体来说设计模式分三大类：</p><ul><li> 创建型模式<br>单例模式、抽象工厂模式、建造者模式、工厂模式、原型模式。 </li><li> 结构型模式<br>适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式。 </li><li> 行为模式<br>模版方法模式、命令模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式、状态模式、策略模式、职责链模式、访问者模式。 </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;六大原则&quot;&gt;&lt;a href=&quot;#六大原则&quot; class=&quot;headerlink&quot; title=&quot;六大原则&quot;&gt;&lt;/a&gt;六大原则&lt;/h1&gt;&lt;p&gt;这篇只有部分代码实例。&lt;/p&gt;
&lt;h2 id=&quot;1、单一职责原则-Sington-Principle&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
      <category term="java" scheme="http://ghower.github.io/categories/java/"/>
    
    
      <category term="java" scheme="http://ghower.github.io/tags/java/"/>
    
      <category term="设计模式" scheme="http://ghower.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>位运算的奇淫巧技</title>
    <link href="http://ghower.github.io//post/%E4%BD%8D%E8%BF%90%E7%AE%97%E7%9A%84%E5%A5%87%E6%B7%AB%E5%B7%A7%E6%8A%80.html"/>
    <id>http://ghower.github.io//post/位运算的奇淫巧技.html</id>
    <published>2022-03-22T15:28:01.000Z</published>
    <updated>2022-03-29T10:29:34.593Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础知识："><a href="#基础知识：" class="headerlink" title="基础知识："></a>基础知识：</h1><h2 id="1-位掩码"><a href="#1-位掩码" class="headerlink" title="1. 位掩码"></a>1. 位掩码</h2><p>在计算机学科及数字逻辑中指的是一串二进制数字，通过与目标数字的按位操作，达到屏蔽指定位而实现需求</p><h1 id="位运算yyds"><a href="#位运算yyds" class="headerlink" title="位运算yyds"></a>位运算yyds</h1><p>位运算永远滴神。。。。</p><h2 id="1-交换两数"><a href="#1-交换两数" class="headerlink" title="1. 交换两数"></a>1. 交换两数</h2><p>通过异或运算，交换两个数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">a <span class="token operator">=</span> a<span class="token operator">^</span>b b <span class="token operator">=</span> a<span class="token operator">^</span>b a <span class="token operator">=</span> a<span class="token operator">^</span>b <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-去除两次出现的数"><a href="#2-去除两次出现的数" class="headerlink" title="2. 去除两次出现的数"></a>2. 去除两次出现的数</h2><p>从一堆数(出现一次或两次)中除去出现了两次的数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">a <span class="token operator">=</span> a<span class="token operator">^</span>b a <span class="token operator">=</span> a<span class="token operator">^</span>b <span class="token comment">// a又回到原来的值 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这个操作还是比较有意思的。在Leetcode中第一次见到，大呼内行。。<br>a=a^b执行了两次，导致这个b 在没有更改的情况下对自身异或，其结果自然就是0了。<br>差不多是这样的a=(a^b)^b，看成a=a^0，就会发现，这个b没有了，而0与任何数异或都等于它自身。</p><h2 id="3-记录三次出现数"><a href="#3-记录三次出现数" class="headerlink" title="3. 记录三次出现数"></a>3. 记录三次出现数</h2><p>说实话还没看懂。。。先记下了</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">seen_once <span class="token operator">=</span> seen_twice <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 思路: // -仅当seen_twice未变时，改变seen_once </span><span class="token comment">// -仅当seen_once未变时，改变seen_twice     </span><span class="token comment">//1. 第一次出现 </span>seen_once <span class="token operator">=</span> <span class="token operator">~</span>seen_once <span class="token operator">&amp;</span> <span class="token punctuation">(</span>seen_twice <span class="token operator">^</span> x<span class="token punctuation">)</span>     seen_twice <span class="token operator">=</span> <span class="token operator">~</span>seen_twice <span class="token operator">&amp;</span> <span class="token punctuation">(</span>seen_once <span class="token operator">^</span> x<span class="token punctuation">)</span>     <span class="token comment">//2. 第二次出现     </span>seen_once <span class="token operator">=</span> <span class="token operator">~</span>seen_once <span class="token operator">&amp;</span> <span class="token punctuation">(</span>seen_twice <span class="token operator">^</span> x<span class="token punctuation">)</span>     seen_twice <span class="token operator">=</span> <span class="token operator">~</span>seen_twice <span class="token operator">&amp;</span> <span class="token punctuation">(</span>seen_once <span class="token operator">^</span> x<span class="token punctuation">)</span> <span class="token comment">//3. 第三次出现     </span>seen_once <span class="token operator">=</span> <span class="token operator">~</span>seen_once <span class="token operator">&amp;</span> <span class="token punctuation">(</span>seen_twice <span class="token operator">^</span> x<span class="token punctuation">)</span>     seen_twice <span class="token operator">=</span> <span class="token operator">~</span>seen_twice <span class="token operator">&amp;</span> <span class="token punctuation">(</span>seen_once <span class="token operator">^</span> x<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-取出最低位的1"><a href="#4-取出最低位的1" class="headerlink" title="4. 取出最低位的1"></a>4. 取出最低位的1</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 这就能得到一个数，最低位的1 </span>x <span class="token operator">=</span> x <span class="token operator">&amp;</span> <span class="token operator">-</span>x <span class="token comment">// 或者</span>x <span class="token operator">&amp;=</span> <span class="token operator">-</span>x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基础知识：&quot;&gt;&lt;a href=&quot;#基础知识：&quot; class=&quot;headerlink&quot; title=&quot;基础知识：&quot;&gt;&lt;/a&gt;基础知识：&lt;/h1&gt;&lt;h2 id=&quot;1-位掩码&quot;&gt;&lt;a href=&quot;#1-位掩码&quot; class=&quot;headerlink&quot; title=&quot;1. 
      
    
    </summary>
    
      <category term="算法与题解" scheme="http://ghower.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="算法" scheme="http://ghower.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
