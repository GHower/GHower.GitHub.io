{"title":"位运算的奇淫巧技","uid":"c5db3da75c510f866655afbe3577f838","slug":"位运算的奇淫巧技","date":"2022-03-22T15:28:01.000Z","updated":"2022-03-29T10:29:34.593Z","comments":true,"path":"api/articles/位运算的奇淫巧技.json","keywords":"GHower 博客 架构 协作 Spring java","cover":null,"content":"<h1 id=\"基础知识：\"><a href=\"#基础知识：\" class=\"headerlink\" title=\"基础知识：\"></a>基础知识：</h1><h2 id=\"1-位掩码\"><a href=\"#1-位掩码\" class=\"headerlink\" title=\"1. 位掩码\"></a>1. 位掩码</h2><p>在计算机学科及数字逻辑中指的是一串二进制数字，通过与目标数字的按位操作，达到屏蔽指定位而实现需求</p>\n<h1 id=\"位运算yyds\"><a href=\"#位运算yyds\" class=\"headerlink\" title=\"位运算yyds\"></a>位运算yyds</h1><p>位运算永远滴神。。。。</p>\n<h2 id=\"1-交换两数\"><a href=\"#1-交换两数\" class=\"headerlink\" title=\"1. 交换两数\"></a>1. 交换两数</h2><p>通过异或运算，交换两个数</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">a <span class=\"token operator\">=</span> a<span class=\"token operator\">^</span>b \nb <span class=\"token operator\">=</span> a<span class=\"token operator\">^</span>b \na <span class=\"token operator\">=</span> a<span class=\"token operator\">^</span>b <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"2-去除两次出现的数\"><a href=\"#2-去除两次出现的数\" class=\"headerlink\" title=\"2. 去除两次出现的数\"></a>2. 去除两次出现的数</h2><p>从一堆数(出现一次或两次)中除去出现了两次的数</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">a <span class=\"token operator\">=</span> a<span class=\"token operator\">^</span>b \na <span class=\"token operator\">=</span> a<span class=\"token operator\">^</span>b <span class=\"token comment\">// a又回到原来的值 </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>这个操作还是比较有意思的。在Leetcode中第一次见到，大呼内行。。<br>a=a^b执行了两次，导致这个b 在没有更改的情况下对自身异或，其结果自然就是0了。<br>差不多是这样的a=(a^b)^b，看成a=a^0，就会发现，这个b没有了，而0与任何数异或都等于它自身。</p>\n<h2 id=\"3-记录三次出现数\"><a href=\"#3-记录三次出现数\" class=\"headerlink\" title=\"3. 记录三次出现数\"></a>3. 记录三次出现数</h2><p>说实话还没看懂。。。先记下了</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">seen_once <span class=\"token operator\">=</span> seen_twice <span class=\"token operator\">=</span> <span class=\"token number\">0</span> \n<span class=\"token comment\">// 思路: // -仅当seen_twice未变时，改变seen_once </span>\n<span class=\"token comment\">// -仅当seen_once未变时，改变seen_twice     </span>\n<span class=\"token comment\">//1. 第一次出现 </span>\nseen_once <span class=\"token operator\">=</span> <span class=\"token operator\">~</span>seen_once <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>seen_twice <span class=\"token operator\">^</span> x<span class=\"token punctuation\">)</span>     \nseen_twice <span class=\"token operator\">=</span> <span class=\"token operator\">~</span>seen_twice <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>seen_once <span class=\"token operator\">^</span> x<span class=\"token punctuation\">)</span>     \n<span class=\"token comment\">//2. 第二次出现     </span>\nseen_once <span class=\"token operator\">=</span> <span class=\"token operator\">~</span>seen_once <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>seen_twice <span class=\"token operator\">^</span> x<span class=\"token punctuation\">)</span>     \nseen_twice <span class=\"token operator\">=</span> <span class=\"token operator\">~</span>seen_twice <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>seen_once <span class=\"token operator\">^</span> x<span class=\"token punctuation\">)</span> \t\n<span class=\"token comment\">//3. 第三次出现     </span>\nseen_once <span class=\"token operator\">=</span> <span class=\"token operator\">~</span>seen_once <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>seen_twice <span class=\"token operator\">^</span> x<span class=\"token punctuation\">)</span>     \nseen_twice <span class=\"token operator\">=</span> <span class=\"token operator\">~</span>seen_twice <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>seen_once <span class=\"token operator\">^</span> x<span class=\"token punctuation\">)</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"4-取出最低位的1\"><a href=\"#4-取出最低位的1\" class=\"headerlink\" title=\"4. 取出最低位的1\"></a>4. 取出最低位的1</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 这就能得到一个数，最低位的1 </span>\nx <span class=\"token operator\">=</span> x <span class=\"token operator\">&amp;</span> <span class=\"token operator\">-</span>x \n<span class=\"token comment\">// 或者</span>\nx <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">-</span>x<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n","feature":true,"text":"基础知识：1. 位掩码在计算机学科及数字逻辑中指的是一串二进制数字，通过与目标数字的按位操作，达到屏蔽指定位而实现需求 位运算yyds位运算永远滴神。。。。 1. 交换两数通过异或运算，交换两个数 a = a^b b = a^b a = a^b 2. 去除两次出现的数从一堆数(出...","link":"","photos":[],"count_time":{"symbolsCount":861,"symbolsTime":"1 mins."},"categories":[{"name":"算法与题解","slug":"算法与题解","count":1,"path":"api/categories/算法与题解.json"}],"tags":[{"name":"算法","slug":"算法","count":1,"path":"api/tags/算法.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%9A\"><span class=\"toc-text\">基础知识：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E4%BD%8D%E6%8E%A9%E7%A0%81\"><span class=\"toc-text\">1. 位掩码</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BD%8D%E8%BF%90%E7%AE%97yyds\"><span class=\"toc-text\">位运算yyds</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E4%BA%A4%E6%8D%A2%E4%B8%A4%E6%95%B0\"><span class=\"toc-text\">1. 交换两数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E5%8E%BB%E9%99%A4%E4%B8%A4%E6%AC%A1%E5%87%BA%E7%8E%B0%E7%9A%84%E6%95%B0\"><span class=\"toc-text\">2. 去除两次出现的数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E8%AE%B0%E5%BD%95%E4%B8%89%E6%AC%A1%E5%87%BA%E7%8E%B0%E6%95%B0\"><span class=\"toc-text\">3. 记录三次出现数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E5%8F%96%E5%87%BA%E6%9C%80%E4%BD%8E%E4%BD%8D%E7%9A%841\"><span class=\"toc-text\">4. 取出最低位的1</span></a></li></ol></li></ol>","author":{"name":"GHower","slug":"blog-author","avatar":"https://blog-gh-site.oss-cn-shenzhen.aliyuncs.com/Logo.png","link":"/","description":"一位正在转移博客的技术人 <br /> @ <b>公众号：GHower</b>","socials":{"github":"https://github.com/GHower","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_40877427","juejin":"https://juejin.cn/user/4503250791314472","customs":{"wechat":{"icon":"/icons/favicons/wechat.png","link":"/icons/favicons/custom/wechat-qrcode.jpg"},"email":{"icon":"/icons/favicons/email.svg","link":"mailto:1520567597@qq.com?subject=主题&body=内容"}}}},"mapped":true,"prev_post":{"title":"【设计模式】23种设计模式(java)学前必备课！","uid":"fe90f43a8852ee9177afcbd4d51ee774","slug":"【设计模式】23种设计模式(java)学前必备课！","date":"2022-03-22T15:28:01.000Z","updated":"2022-03-29T10:18:47.590Z","comments":true,"path":"api/articles/【设计模式】23种设计模式(java)学前必备课！.json","keywords":"GHower 博客 架构 协作 Spring java","cover":null,"text":"六大原则这篇只有部分代码实例。 1、单一职责原则(Sington Principle)不要存在多于一个导致类变更的原因，也就是说每个类应该实现单一的职责，如若不然，就应该把类拆分。不要让一个类承担过多的职责，避免职责耦合在一起 2、里氏替换原则（Liskov Substituti...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"java","slug":"java","count":2,"path":"api/categories/java.json"}],"tags":[{"name":"java","slug":"java","count":2,"path":"api/tags/java.json"},{"name":"设计模式","slug":"设计模式","count":1,"path":"api/tags/设计模式.json"}],"author":{"name":"GHower","slug":"blog-author","avatar":"https://blog-gh-site.oss-cn-shenzhen.aliyuncs.com/Logo.png","link":"/","description":"一位正在转移博客的技术人 <br /> @ <b>公众号：GHower</b>","socials":{"github":"https://github.com/GHower","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_40877427","juejin":"https://juejin.cn/user/4503250791314472","customs":{"wechat":{"icon":"/icons/favicons/wechat.png","link":"/icons/favicons/custom/wechat-qrcode.jpg"},"email":{"icon":"/icons/favicons/email.svg","link":"mailto:1520567597@qq.com?subject=主题&body=内容"}}}},"feature":true},"next_post":{}}