{"title":"java8新特性之Stream流操作","uid":"e6c644d98e2b92d02366e9ad5ebc1eb5","slug":"java8新特性之Stream流操作","date":"2022-03-22T15:28:01.000Z","updated":"2022-03-29T10:29:34.588Z","comments":true,"path":"api/articles/java8新特性之Stream流操作.json","keywords":"GHower 博客 架构 协作 Spring java","cover":null,"content":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>Stream流操作是java8的最重要的新特性之一，功能强大,非常常用。可以说每个java coder必须掌握，这次把理论放在最后面，因为你可能不需要知道的多么详细，只是需要看看某个功能，可能听名字就大概知道它是做什么的。</p>\n<p>举个简单例子，现在给了你同学信息和成绩，你需要统计班级平均分</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 以前可能的做法</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Double</span> <span class=\"token function\">avgScore</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> stus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> sum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> student <span class=\"token operator\">:</span> stus<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> core <span class=\"token operator\">=</span> student<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">;</span>\n        sum <span class=\"token operator\">+=</span> core<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span>  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span>sum <span class=\"token operator\">/</span> stus<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 有了Stream后，</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Double</span> <span class=\"token function\">avgScore</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> stus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">OptionalDouble</span> average <span class=\"token operator\">=</span> stus<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mapToDouble</span><span class=\"token punctuation\">(</span>stu <span class=\"token operator\">-></span> stu<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">average</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> average<span class=\"token punctuation\">.</span><span class=\"token function\">getAsDouble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"流的一些常用操作\"><a href=\"#流的一些常用操作\" class=\"headerlink\" title=\"流的一些常用操作\"></a>流的一些常用操作</h1><h3 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h3><p><code>filter</code>过滤操作，只返回满足条件的数据</p>\n<p><code>filter</code>返回的流中只包含满足断言(<code>predicate</code>)的数据</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//输出学生数组中，成绩大于80的学生</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span>  <span class=\"token function\">sFilter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> stus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        stus<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>student <span class=\"token operator\">-></span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getCore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"distinct\"><a href=\"#distinct\" class=\"headerlink\" title=\"distinct\"></a>distinct</h3><p><code>distinct</code>输出的流中彼此不同的元素，通过<code>Object.equals(Object)</code>来检查是否包含相同的元素。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//从数组中找出不同的对象</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span>  <span class=\"token function\">sDistinct</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> stus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        stus<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">distinct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"map、peek与forEach对比\"><a href=\"#map、peek与forEach对比\" class=\"headerlink\" title=\"map、peek与forEach对比\"></a>map、peek与forEach对比</h3><p><code>map</code>可以对流中每一个的元素执行操作返回一种元素(可以相同)，可以用来做元素转换</p>\n<p><code>peek</code>通常用于debug，会通过Consumer对流操作，但操作结果不返回Stream中。</p>\n<p><code>forEach</code>与<code>map</code>和<code>peek</code>类似，但由于不会返回元素，forEach的返回值是void，可以看做是流的终点操作</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//map,从Student数组中获取由name组成的数组</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span>  <span class=\"token function\">sMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> stus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> collect <span class=\"token operator\">=</span> stus<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>student <span class=\"token operator\">-></span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        stus<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        collect<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//forEach，将Student数组中的成绩属性全部加1</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span>  <span class=\"token function\">sForEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> stus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        stus<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>student <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n                    student<span class=\"token punctuation\">.</span><span class=\"token function\">setCore</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">.</span><span class=\"token function\">getCore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        stus<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>peek</code>和<code>map</code>的区别，在后面的理论中会对其原理做解释</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// peek</span>\n<span class=\"token class-name\">IntStream</span><span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">boxed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n            i<span class=\"token operator\">=</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">print</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 输出结果 1234</span>\n<span class=\"token comment\">//map</span>\n<span class=\"token class-name\">IntStream</span><span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">boxed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-></span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">print</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 输出结果 2345</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可见peek中虽然对i进行+1操作，但没有改变源数据</p>\n<h3 id=\"flatMap\"><a href=\"#flatMap\" class=\"headerlink\" title=\"flatMap\"></a>flatMap</h3><p>扁平化处理流，<code>flatMap</code>和<code>map</code>类似，但flatMap转换返回的是Stream对象，而map返回的是数据源的对象，flatMap会把返回的Stream对象中的元素压缩到一起，最后回到原来的流中</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedHashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> allValues <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Collection&lt;List&lt;Integer>></span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                      <span class=\"token comment\">// Stream&lt;List&lt;Integer>></span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token operator\">::</span><span class=\"token function\">stream</span><span class=\"token punctuation\">)</span>         <span class=\"token comment\">// Stream&lt;Integer></span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>allValues<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这个例子中，将map.values扁平化处理成单个的Stream。</p>\n<h3 id=\"sorted\"><a href=\"#sorted\" class=\"headerlink\" title=\"sorted\"></a>sorted</h3><p><code>sorted</code>对源数据进行排序，通过实现Comparable接口完成排序。</p>\n<p>如果源没有实现Comparable接口，在终点操作时将会抛出<code>java.lang.ClassCastException</code>异常。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 按成绩排序，从大到小 </span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sSorted</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> stus<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> collect <span class=\"token operator\">=</span> stus<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">comparingInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token operator\">::</span><span class=\"token function\">getCore</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reversed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        collect<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"limit\"><a href=\"#limit\" class=\"headerlink\" title=\"limit\"></a>limit</h3><p><code>limit</code>进行短路操作。指定一定数量的元素的流。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sLimit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> stus<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> collect <span class=\"token operator\">=</span> stus<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">comparingInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token operator\">::</span><span class=\"token function\">getCore</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reversed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        collect<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"boxed\"><a href=\"#boxed\" class=\"headerlink\" title=\"boxed\"></a>boxed</h3><p>将一个原始流转为盒型的流，就是将原始数据类型<code>int</code>，<code>long</code>，<code>double</code>转为<code>Integer</code>，<code>Long</code>，<code>Double</code></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 计算average</span>\n<span class=\"token class-name\">OptionalDouble</span> average <span class=\"token operator\">=</span> <span class=\"token class-name\">IntStream</span><span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">average</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>average<span class=\"token punctuation\">.</span><span class=\"token function\">getAsDouble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// peek内的i是Integer类型</span>\n<span class=\"token class-name\">IntStream</span><span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">boxed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n            i<span class=\"token operator\">=</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">print</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"skip\"><a href=\"#skip\" class=\"headerlink\" title=\"skip\"></a>skip</h3><p><code>skip</code>从当前流结果中丢弃前n个元素，返回新的流，如果元素个数小于或等于n，会返回空的流</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sSkip</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> stus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n       <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> collect <span class=\"token operator\">=</span> stus<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n               <span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n               <span class=\"token punctuation\">.</span><span class=\"token function\">skip</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n               <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       collect<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce\"></a>reduce</h3><p><code>reduce</code>可以看做是<code>map</code>的细节版本，它有两个参数</p>\n<ul>\n<li>pre：上一次返回的对象</li>\n<li>cur：当前对象</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> reduce <span class=\"token operator\">=</span> <span class=\"token class-name\">IntStream</span><span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">boxed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">,</span>cur<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span>\n         <span class=\"token keyword\">return</span> pre<span class=\"token operator\">+</span>cur<span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>reduce<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>reduce</code> 还有重载的方法，大概说一下</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 将使用流中第一个元素作为初始值</span>\npubic <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BinaryOperator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> accumulator<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 使用提供的identity作为初始值</span>\npubic <span class=\"token class-name\">T</span> <span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> identity<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BinaryOperator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> accumulator<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//同上，但对结果进行combiner操作，可以转为其他类型</span>\npubic <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">U</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">U</span> <span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">U</span> identity<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BiFunction</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">U</span><span class=\"token punctuation\">,</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">U</span><span class=\"token punctuation\">></span></span> accumulator<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BinaryOperator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">U</span><span class=\"token punctuation\">></span></span> combiner<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>值得注意的是<code>accumulator</code>应该满足结合性(associative)。</p>\n<h3 id=\"match\"><a href=\"#match\" class=\"headerlink\" title=\"match\"></a>match</h3><p><code>match</code> 匹配，它有三个方法：</p>\n<ul>\n<li> allMatch<br>若流中所有元素符合条件断言，则返回true，反之为false，流为空则总是返回true </li>\n<li> anyMatch<br>流中有一个及以上符合条件断言，则返回true </li>\n<li> noneMatch<br>流中所有元素不满足条件断言，则返回true </li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sMatch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> stus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">boolean</span> b <span class=\"token operator\">=</span> stus<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">allMatch</span><span class=\"token punctuation\">(</span>stu <span class=\"token operator\">-></span> stu<span class=\"token punctuation\">.</span><span class=\"token function\">getCore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        b <span class=\"token operator\">=</span> stus<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">anyMatch</span><span class=\"token punctuation\">(</span>stu <span class=\"token operator\">-></span> stu<span class=\"token punctuation\">.</span><span class=\"token function\">getCore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">90</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        b <span class=\"token operator\">=</span> stus<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">noneMatch</span><span class=\"token punctuation\">(</span>stu <span class=\"token operator\">-></span> stu<span class=\"token punctuation\">.</span><span class=\"token function\">getCore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"count\"><a href=\"#count\" class=\"headerlink\" title=\"count\"></a>count</h3><p><code>count</code> 方法返回流中元素的数量、它的底层实现为</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token function\">mapToLong</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">-></span><span class=\"token number\">1L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 其中sum是原始流的方法</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"collect\"><a href=\"#collect\" class=\"headerlink\" title=\"collect\"></a>collect</h3><p><code>collect</code> 非常常用了，它将按参数的方法，收集流中的数据组装然后返回一个对象</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 收集成List</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> asList <span class=\"token operator\">=</span> stringStream<span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">ArrayList</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">,</span> \n    <span class=\"token class-name\">ArrayList</span><span class=\"token operator\">::</span><span class=\"token function\">add</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">ArrayList</span><span class=\"token operator\">::</span><span class=\"token function\">addAll</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// 收集成String</span>\n<span class=\"token class-name\">String</span> concat <span class=\"token operator\">=</span> stringStream<span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">StringBuilder</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">,</span> \n    <span class=\"token class-name\">StringBuilder</span><span class=\"token operator\">::</span><span class=\"token function\">append</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">StringBuilder</span><span class=\"token operator\">::</span><span class=\"token function\">append</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h3><ul>\n<li> findAny<br>从流中任意返回一个元素，串行流比较难看到效果 </li>\n<li> findFirst<br>返回流中第一个元素 </li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 若流为空，则返回空的Optional</span>\n<span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> any <span class=\"token operator\">=</span> stus<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">findAny</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> first <span class=\"token operator\">=</span> stus<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">findFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"max、min\"><a href=\"#max、min\" class=\"headerlink\" title=\"max、min\"></a>max、min</h3><ul>\n<li>max：返回流中的最大值</li>\n<li>min：返回流中最小值</li>\n</ul>\n<p>boxed型的流需要给出自己的比较器，而原始流不需要</p>\n<h3 id=\"toArray\"><a href=\"#toArray\" class=\"headerlink\" title=\"toArray()\"></a>toArray()</h3><p>将流中的元素放入到一个数组中。</p>\n<h3 id=\"contact\"><a href=\"#contact\" class=\"headerlink\" title=\"contact\"></a>contact</h3><p>连接两个类型一样的流对象</p>\n<h1 id=\"来一杯理论\"><a href=\"#来一杯理论\" class=\"headerlink\" title=\"来一杯理论\"></a>来一杯理论</h1><p>理论整理来自Javadoc。</p>\n<h4 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h4><p>Stream流和具体的集合区别。</p>\n<ul>\n<li> 不存储数据：<br>流操作基于数据源对象，但本身不存储数据元素，或者说用完即消(使用者是无感知的)，通过管道将数据源元素传递给操作 </li>\n<li> 函数式编程<br>流操作也不会修改数据源，filter、map都不会对源数据做修改 </li>\n<li> 延迟操作<br>流的很多操作如filter,map等中间操作是延迟执行的，只记录了要怎么操作但还没执行，只有到终点操作才会将操作顺序执行。<br>就像点菜一样，下单过程，不是马上做的，而且确定了订单才根据订单做。 </li>\n<li> 解绑<br>对于无限数量的流，有些操作是可以在有限的时间完成的，比如<code>limit(n)</code> 或 <code>findFirst()</code>，这些操作可以实现”短路”(Short-circuiting)，访问到有限的元素后就可以返回。 </li>\n<li> 纯消费<br>流的元素只能访问一次，类似迭代器Iterator，操作没有回头路，如果你想从头重新访问流的元素，那你得重新生成一个新的流。<br>就是说流操作的每一步都是上一步的结果，而初始数据则是源数据。 </li>\n</ul>\n<p>流的操作是以管道的方式串起来的。流管道包含一个数据源，接着包含零到N个中间操作，最后以一个终点操作结束。</p>\n<p><code>Stream</code>接口还提供了原语int，long，double级的专门化的流。如<code>IntStream</code>, <code>LongStream</code> 和 <code>DoubleStream</code>。姑且称他们为primitive原始流，是对基本类型执行操作的，不过我们使用流通常是对对象操作。</p>\n<h5 id=\"创建流\"><a href=\"#创建流\" class=\"headerlink\" title=\"创建流\"></a>创建流</h5><p>创建的方法很多，主要有</p>\n<ul>\n<li>集合自带的<code>stream()</code>方法</li>\n<li>集合的静态<code>Arrays.stream(Object[])</code>方法</li>\n<li>流的静态方法，如<code>Stream.of(Object[])</code></li>\n<li>从文件中获得流，<code>BufferedReader.lines()</code></li>\n<li>文件类<code>Files</code> 操作路径的方法，如<code>list</code>、<code>find</code>、<code>walk</code>等。</li>\n<li>随机数流<code>Random.ints()</code></li>\n<li>底层的<code>StreamSupport</code>，它提供了将拆分器<code>Spliterator</code>转换成流的方法。</li>\n</ul>\n<h5 id=\"中间操作-intermediate-operations\"><a href=\"#中间操作-intermediate-operations\" class=\"headerlink\" title=\"中间操作 intermediate operations\"></a>中间操作 intermediate operations</h5><p>中间操作会返回流对象本身，形成串联的管道，流式风格（fluent style），并且中间操作是延迟的，不会修改源数据，只有在终点操作时才真正执行。</p>\n<p>常见的中间操作</p>\n<p><code>filter</code>、<code>distinct</code>、<code>map</code>、<code>peek</code>、<code>sorted</code>、<code>limit</code>、<code>boxed</code>、<code>skip</code>、<code>flatmap</code>、<code>skip</code>、<code>reduce</code></p>\n<h5 id=\"终点操作-terminal-operations\"><a href=\"#终点操作-terminal-operations\" class=\"headerlink\" title=\"终点操作 terminal operations\"></a>终点操作 terminal operations</h5><p>终点操作是真正执行的，会将流的最终结果返回。</p>\n<p>常见的终点操作</p>\n<p><code>Match</code>、<code>count</code>、<code>collect</code>、<code>find</code>、<code>forEach</code>、<code>forEachOrdered</code>、<code>max</code>、<code>min</code>、<code>reduce</code>、<code>average</code>、<code>toArray</code></p>\n<h4 id=\"1-流的串行与并行\"><a href=\"#1-流的串行与并行\" class=\"headerlink\" title=\"1. 流的串行与并行\"></a>1. 流的串行与并行</h4><p>所有的流操作都可以串行执行或者并行执行。除非显示地创建并行流，否则Java库中创建的都是串行流。</p>\n<ul>\n<li><code>Collection.stream()</code>创建串行流，使用<code>parallel()</code>也可以转为并行流</li>\n<li><code>Collection.parallelStream()</code>创建并行流，使用<code>sequential()</code>方法可以转为串行流。</li>\n</ul>\n<h4 id=\"2-无干扰-Non-interference\"><a href=\"#2-无干扰-Non-interference\" class=\"headerlink\" title=\"2. 无干扰 Non-interference\"></a>2. 无干扰 Non-interference</h4><p>流可以从非线程安全的集合中创建，当流的管道执行的时候，非concurrent数据源不应该被改变。</p>\n<p>也就是说，在终点操作(管道执行)时，不能对数据源再做修改，避免并发问题产生无法预料的结果</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 这会抛出异常java.util.ConcurrentModificationException</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> l <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> sl <span class=\"token operator\">=</span> l<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sl<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">-></span> l<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 正常</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> l <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> sl <span class=\"token operator\">=</span> l<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nl<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"three\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 在中间操作修改</span>\nsl<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 使用concurrent的方式,也正常,但可能有无法预料的结果</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> l <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CopyOnWriteArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> sl <span class=\"token operator\">=</span> l<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsl<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">-></span> l<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"three\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><a href=\"https://juejin.cn/post/6844903576339218440\">CopyOnWriteArrayList的参考</a></p>\n<p>特别的，如果将add换成set，并不会抛异常，因为对象没有被修改，只是内容发生变化。</p>\n<h4 id=\"3-结合性\"><a href=\"#3-结合性\" class=\"headerlink\" title=\"3. 结合性\"></a>3. 结合性</h4><p>一个操作或者函数<code>op</code>满足结合性意味着它满足下面的条件</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token punctuation\">(</span>a op b<span class=\"token punctuation\">)</span> op c <span class=\"token operator\">==</span> a <span class=\"token function\">op</span> <span class=\"token punctuation\">(</span>b op c<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>对于并发流来说，如果操作满足结合性，我们就可以并行计算</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">a op b op c op d <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span>a op b<span class=\"token punctuation\">)</span> op <span class=\"token punctuation\">(</span>c op d<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>比如<code>min</code>、<code>max</code>以及字符串连接都是满足结合性的。</p>\n<h4 id=\"4-排序\"><a href=\"#4-排序\" class=\"headerlink\" title=\"4. 排序\"></a>4. 排序</h4><p>某些流的返回的元素是有确定顺序的，我们称之为 _encounter order_。</p>\n<p>一个流是否是encounter order主要依赖数据源和它的中间操作，比如数据源List和Array上创建的流是有序的(ordered)，但是在HashSet创建的流不是有序的.</p>\n<p><code>sorted</code>方法可以将流转换成<strong>encounter order</strong>的，<code>unordered</code>可以将流转换成<strong>encounter order</strong>的。</p>\n<p><strong>注意，这个方法并不是对元素进行排序或者打散，而是返回一个是否_encounter order_的流</strong></p>\n<ul>\n<li><code>map</code>会用不同的类型替换流中的元素，此时，元素的有序性已经没有意义了。</li>\n<li><code>filter</code> 执行丢弃了一些值，流的类型没有改变</li>\n</ul>\n<p>对于串行流，流有序与否不会影响其性能，只是会影响确定性(determinism)，无序流在多次执行的时候结果可能是不一样的。</p>\n","feature":true,"text":"介绍Stream流操作是java8的最重要的新特性之一，功能强大,非常常用。可以说每个java coder必须掌握，这次把理论放在最后面，因为你可能不需要知道的多么详细，只是需要看看某个功能，可能听名字就大概知道它是做什么的。 举个简单例子，现在给了你同学信息和成绩，你需要统计班...","link":"","photos":[],"count_time":{"symbolsCount":"8.5k","symbolsTime":"8 mins."},"categories":[{"name":"java","slug":"java","count":2,"path":"api/categories/java.json"}],"tags":[{"name":"java","slug":"java","count":2,"path":"api/tags/java.json"},{"name":"新特性","slug":"新特性","count":1,"path":"api/tags/新特性.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">介绍</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%B5%81%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">流的一些常用操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#filter\"><span class=\"toc-text\">filter</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#distinct\"><span class=\"toc-text\">distinct</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#map%E3%80%81peek%E4%B8%8EforEach%E5%AF%B9%E6%AF%94\"><span class=\"toc-text\">map、peek与forEach对比</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#flatMap\"><span class=\"toc-text\">flatMap</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#sorted\"><span class=\"toc-text\">sorted</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#limit\"><span class=\"toc-text\">limit</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#boxed\"><span class=\"toc-text\">boxed</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#skip\"><span class=\"toc-text\">skip</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#reduce\"><span class=\"toc-text\">reduce</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#match\"><span class=\"toc-text\">match</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#count\"><span class=\"toc-text\">count</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#collect\"><span class=\"toc-text\">collect</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#find\"><span class=\"toc-text\">find</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#max%E3%80%81min\"><span class=\"toc-text\">max、min</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#toArray\"><span class=\"toc-text\">toArray()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#contact\"><span class=\"toc-text\">contact</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9D%A5%E4%B8%80%E6%9D%AF%E7%90%86%E8%AE%BA\"><span class=\"toc-text\">来一杯理论</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E6%B5%81\"><span class=\"toc-text\">创建流</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%B8%AD%E9%97%B4%E6%93%8D%E4%BD%9C-intermediate-operations\"><span class=\"toc-text\">中间操作 intermediate operations</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%BB%88%E7%82%B9%E6%93%8D%E4%BD%9C-terminal-operations\"><span class=\"toc-text\">终点操作 terminal operations</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E6%B5%81%E7%9A%84%E4%B8%B2%E8%A1%8C%E4%B8%8E%E5%B9%B6%E8%A1%8C\"><span class=\"toc-text\">1. 流的串行与并行</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E6%97%A0%E5%B9%B2%E6%89%B0-Non-interference\"><span class=\"toc-text\">2. 无干扰 Non-interference</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E7%BB%93%E5%90%88%E6%80%A7\"><span class=\"toc-text\">3. 结合性</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">4. 排序</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"GHower","slug":"blog-author","avatar":"https://blog-gh-site.oss-cn-shenzhen.aliyuncs.com/Logo.png","link":"/","description":"一位正在转移博客的技术人 <br /> @ <b>公众号：GHower</b>","socials":{"github":"https://github.com/GHower","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_40877427","juejin":"https://juejin.cn/user/4503250791314472","customs":{"wechat":{"icon":"/icons/favicons/wechat.png","link":"/icons/favicons/custom/wechat-qrcode.jpg"},"email":{"icon":"/icons/favicons/email.svg","link":"mailto:1520567597@qq.com?subject=主题&body=内容"}}}},"mapped":true,"prev_post":{},"next_post":{"title":"JS中相等判断，三等号===、双等号==、同值Object.is的区别详解","uid":"23c381318a163a9c297db946a6f4c72e","slug":"JS中相等判断，三等号===、双等号==、同值Object.is的区别详解","date":"2022-03-22T15:28:01.000Z","updated":"2022-03-29T11:20:57.736Z","comments":true,"path":"api/articles/JS中相等判断，三等号===、双等号==、同值Object.is的区别详解.json","keywords":"GHower 博客 架构 协作 Spring java","cover":null,"text":"ES6以后有三种判等方法 抽象（非严格）相等比较 (==) 严格相等(全等)比较 (===) 同值相等Object.is (ES6新特性) 使用哪一种比较全看你的业务需要，不过一般都用===和Object.is MDN中有很详细的介绍，这里直接拿过来用了 在做相同的比较时，三种方...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"javascript","slug":"javascript","count":1,"path":"api/categories/javascript.json"}],"tags":[{"name":"javascript","slug":"javascript","count":1,"path":"api/tags/javascript.json"}],"author":{"name":"GHower","slug":"blog-author","avatar":"https://blog-gh-site.oss-cn-shenzhen.aliyuncs.com/Logo.png","link":"/","description":"一位正在转移博客的技术人 <br /> @ <b>公众号：GHower</b>","socials":{"github":"https://github.com/GHower","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_40877427","juejin":"https://juejin.cn/user/4503250791314472","customs":{"wechat":{"icon":"/icons/favicons/wechat.png","link":"/icons/favicons/custom/wechat-qrcode.jpg"},"email":{"icon":"/icons/favicons/email.svg","link":"mailto:1520567597@qq.com?subject=主题&body=内容"}}}},"feature":true}}