{"title":"【设计模式】23种设计模式(java)学前必备课！","uid":"fe90f43a8852ee9177afcbd4d51ee774","slug":"【设计模式】23种设计模式(java)学前必备课！","date":"2022-03-22T15:28:01.000Z","updated":"2022-03-29T10:18:47.590Z","comments":true,"path":"api/articles/【设计模式】23种设计模式(java)学前必备课！.json","keywords":"GHower 博客 架构 协作 Spring java","cover":null,"content":"<h1 id=\"六大原则\"><a href=\"#六大原则\" class=\"headerlink\" title=\"六大原则\"></a>六大原则</h1><p>这篇只有部分代码实例。</p>\n<h2 id=\"1、单一职责原则-Sington-Principle\"><a href=\"#1、单一职责原则-Sington-Principle\" class=\"headerlink\" title=\"1、单一职责原则(Sington Principle)\"></a>1、单一职责原则(Sington Principle)</h2><p>不要存在多于一个导致类变更的原因，也就是说每个类应该实现单一的职责，如若不然，就应该把类拆分。<strong>不要让一个类承担过多的职责</strong>，避免职责耦合在一起</p>\n<h2 id=\"2、里氏替换原则（Liskov-Substitution-Principle）\"><a href=\"#2、里氏替换原则（Liskov-Substitution-Principle）\" class=\"headerlink\" title=\"2、里氏替换原则（Liskov Substitution Principle）\"></a>2、里氏替换原则（Liskov Substitution Principle）</h2><p>里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。</p>\n<p>里氏代换原则中说，任何基类（父类）可以出现的地方，子类一定可以出现。 LSP是继承复用的基石，只有当衍生类（子类）可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。</p>\n<p>里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。—— From Baidu 百科</p>\n<p>历史替换原则中，子类对父类的方法尽量不要重写和重载。因为父类代表了定义好的结构，通过这个规范的接口与外界交互，子类不应该随便破坏它。</p>\n<p><strong>所有引用基类（父类）的地方必须能透明地使用其子类的对象。</strong></p>\n<h2 id=\"3、依赖倒转原则（Dependence-Inversion-Principle）\"><a href=\"#3、依赖倒转原则（Dependence-Inversion-Principle）\" class=\"headerlink\" title=\"3、依赖倒转原则（Dependence Inversion Principle）\"></a>3、依赖倒转原则（Dependence Inversion Principle）</h2><p>这个是开闭原则的基础，具体内容：面向接口编程，依赖于抽象而不依赖于具体实现。写代码时用到具体类时，不与具体类交互，而与具体类的上层接口交互。</p>\n<p>依赖倒置就是为了解决耦合，让程序依赖抽象。一个简单的例子</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 反例</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Sys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Cat</span> cat<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Dog</span> dog <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Sys</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">autoRun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            cat<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>dog<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 应用依赖倒置原则</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Sys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Animal</span> animal<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Sys</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Animal</span> animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>animal <span class=\"token operator\">=</span> animal<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">autoRun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        animal<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看出不再于具体实现的Cat和Dog类，而是抽象的Animal接口，加入新的动物时也不用怕。</p>\n<p>这种设计也充分说明了，类与类不应该直接依赖细节，因为这样会导致耦合，限制了可扩展性，而是让<strong>类与类直接依赖抽象</strong>。</p>\n<h2 id=\"4、接口隔离原则（Interface-Segregation-Principle）\"><a href=\"#4、接口隔离原则（Interface-Segregation-Principle）\" class=\"headerlink\" title=\"4、接口隔离原则（Interface Segregation Principle）\"></a>4、接口隔离原则（Interface Segregation Principle）</h2><p>这个原则的意思是：每个接口中不存在子类用不到却必须实现的方法，如果不然，就要将接口拆分。使用多个隔离的接口，比使用单个接口（多个接口方法集合到一个的接口）要好。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Human</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">birth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 生孩子</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> man<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> woman<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如上，man类可能不需要实现接口中的birth方法，而只使用一个接口让两个类实现的话，两个类中就存在不需要的方法，导致接口没有隔离。</p>\n<p>单一职责和接口隔离原则</p>\n<ul>\n<li>单一职责原则注重的是职责，针对的是程序中的实现和细节；</li>\n<li>接口隔离原则注重的是对接口依赖的隔离，主要针对抽象；</li>\n</ul>\n<h2 id=\"5、开闭原则（Open-Close-Principle）\"><a href=\"#5、开闭原则（Open-Close-Principle）\" class=\"headerlink\" title=\"5、开闭原则（Open Close Principle）\"></a>5、开闭原则（Open Close Principle）</h2><p>就是说<strong>对扩展开放，对修改关闭</strong>。在程序需要进行拓展的时候，不应该去修改原有的代码，而是要扩展原有代码，实现一个热插拔的效果。为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类等。依赖倒置中的例子同样违反开闭原则。</p>\n<h2 id=\"6、合成复用原则（Composite-And-Reuse-Principle）\"><a href=\"#6、合成复用原则（Composite-And-Reuse-Principle）\" class=\"headerlink\" title=\"6、合成复用原则（Composite And Reuse Principle）\"></a>6、合成复用原则（Composite And Reuse Principle）</h2><p>CARP原则是尽量优先使用合成/聚合的方式，而不是使用继承。</p>\n<p>就是在一个新的对象里面使用一些已有的对象，使之成为新对象的一部分；新的对象通过向这些对象的委派达到复用已有功能的目的。</p>\n<p>复用的两种方式： 合成和继承</p>\n<h1 id=\"一法则\"><a href=\"#一法则\" class=\"headerlink\" title=\"一法则\"></a>一法则</h1><h2 id=\"7、迪米特法则（最少知道原则）（Demeter-Principle）\"><a href=\"#7、迪米特法则（最少知道原则）（Demeter-Principle）\" class=\"headerlink\" title=\"7、迪米特法则（最少知道原则）（Demeter Principle）\"></a>7、迪米特法则（最少知道原则）（Demeter Principle）</h2><p>一个类对自己依赖的类知道的越少越好。也就是说无论被依赖的类多么复杂，都应该将逻辑封装在方法的内部，和我这个类没关系，你只需要通过public方法提供给外部。这样当被依赖的类变化时，才能最小的影响该类，尽量少地影响其他模块，降低系统的耦合度，使类与类之间保持松散的耦合关系。</p>\n<p>最少知道原则的另一个表达方式是：只与直接的朋友通信。类之间只要有耦合关系，就叫朋友关系。耦合分为依赖、关联、聚合、组合等。我们称出现在成员变量、方法参数、方法返回值中的类为直接朋友。局部变量、临时变量则不是直接的朋友。我们要求陌生的类不要作为局部变量出现在类中。</p>\n<h1 id=\"设计模式分类\"><a href=\"#设计模式分类\" class=\"headerlink\" title=\"设计模式分类\"></a>设计模式分类</h1><p>总体来说设计模式分三大类：</p>\n<ul>\n<li> 创建型模式<br>单例模式、抽象工厂模式、建造者模式、工厂模式、原型模式。 </li>\n<li> 结构型模式<br>适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式。 </li>\n<li> 行为模式<br>模版方法模式、命令模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式、状态模式、策略模式、职责链模式、访问者模式。 </li>\n</ul>\n","feature":true,"text":"六大原则这篇只有部分代码实例。 1、单一职责原则(Sington Principle)不要存在多于一个导致类变更的原因，也就是说每个类应该实现单一的职责，如若不然，就应该把类拆分。不要让一个类承担过多的职责，避免职责耦合在一起 2、里氏替换原则（Liskov Substituti...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"java","slug":"java","count":2,"path":"api/categories/java.json"}],"tags":[{"name":"java","slug":"java","count":2,"path":"api/tags/java.json"},{"name":"设计模式","slug":"设计模式","count":1,"path":"api/tags/设计模式.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99\"><span class=\"toc-text\">六大原则</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99-Sington-Principle\"><span class=\"toc-text\">1、单一职责原则(Sington Principle)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99%EF%BC%88Liskov-Substitution-Principle%EF%BC%89\"><span class=\"toc-text\">2、里氏替换原则（Liskov Substitution Principle）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81%E4%BE%9D%E8%B5%96%E5%80%92%E8%BD%AC%E5%8E%9F%E5%88%99%EF%BC%88Dependence-Inversion-Principle%EF%BC%89\"><span class=\"toc-text\">3、依赖倒转原则（Dependence Inversion Principle）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4%E3%80%81%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99%EF%BC%88Interface-Segregation-Principle%EF%BC%89\"><span class=\"toc-text\">4、接口隔离原则（Interface Segregation Principle）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5%E3%80%81%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99%EF%BC%88Open-Close-Principle%EF%BC%89\"><span class=\"toc-text\">5、开闭原则（Open Close Principle）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6%E3%80%81%E5%90%88%E6%88%90%E5%A4%8D%E7%94%A8%E5%8E%9F%E5%88%99%EF%BC%88Composite-And-Reuse-Principle%EF%BC%89\"><span class=\"toc-text\">6、合成复用原则（Composite And Reuse Principle）</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%80%E6%B3%95%E5%88%99\"><span class=\"toc-text\">一法则</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7%E3%80%81%E8%BF%AA%E7%B1%B3%E7%89%B9%E6%B3%95%E5%88%99%EF%BC%88%E6%9C%80%E5%B0%91%E7%9F%A5%E9%81%93%E5%8E%9F%E5%88%99%EF%BC%89%EF%BC%88Demeter-Principle%EF%BC%89\"><span class=\"toc-text\">7、迪米特法则（最少知道原则）（Demeter Principle）</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">设计模式分类</span></a></li></ol>","author":{"name":"GHower","slug":"blog-author","avatar":"https://blog-gh-site.oss-cn-shenzhen.aliyuncs.com/Logo.png","link":"/","description":"一位正在转移博客的技术人 <br /> @ <b>公众号：GHower</b>","socials":{"github":"https://github.com/GHower","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_40877427","juejin":"https://juejin.cn/user/4503250791314472","customs":{"wechat":{"icon":"/icons/favicons/wechat.png","link":"/icons/favicons/custom/wechat-qrcode.jpg"},"email":{"icon":"/icons/favicons/email.svg","link":"mailto:1520567597@qq.com?subject=主题&body=内容"}}}},"mapped":true,"prev_post":{"title":"GithubPages搭建教程","uid":"415a4ba685615286d7d2dd46636fc692","slug":"GithubPages搭建教程","date":"2022-03-22T15:28:01.000Z","updated":"2022-03-29T10:19:10.942Z","comments":true,"path":"api/articles/GithubPages搭建教程.json","keywords":"GHower 博客 架构 协作 Spring java","cover":[],"text":"一、介绍这里省略300字介绍….. 二、创建自己的GithubPages1.基本页面要创建GithubPages 需要创建一个 username.Github.io的仓库 2.选择GithubPages的主题 3.测试这里以简历的主题做测试，选Cayman theme，来到ind...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"其他","slug":"其他","count":1,"path":"api/categories/其他.json"}],"tags":[{"name":"建站","slug":"建站","count":1,"path":"api/tags/建站.json"}],"author":{"name":"GHower","slug":"blog-author","avatar":"https://blog-gh-site.oss-cn-shenzhen.aliyuncs.com/Logo.png","link":"/","description":"一位正在转移博客的技术人 <br /> @ <b>公众号：GHower</b>","socials":{"github":"https://github.com/GHower","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_40877427","juejin":"https://juejin.cn/user/4503250791314472","customs":{"wechat":{"icon":"/icons/favicons/wechat.png","link":"/icons/favicons/custom/wechat-qrcode.jpg"},"email":{"icon":"/icons/favicons/email.svg","link":"mailto:1520567597@qq.com?subject=主题&body=内容"}}}},"feature":true},"next_post":{}}